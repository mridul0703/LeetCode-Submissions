/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {

        if (head == NULL || head->next == NULL) return true;

        ListNode* mid = head;
        ListNode* full = head;
        while ( full->next && full->next->next){
            mid = mid->next;
            full = full->next->next;
        }

        ListNode* first = head;
        ListNode* second = reverseList(mid->next);

        while(second) {
            if(first->val != second->val){
                return false;
            }
            first = first->next;
            second = second->next;
        }
        return 1;
    }
private: 
    ListNode* reverseList(ListNode* head){
        ListNode* prev = NULL;
        while(head){
            ListNode* nextNode = head->next;
            head->next = prev;
            prev = head;
            head = nextNode; 
        }
        return prev;
    }
};
