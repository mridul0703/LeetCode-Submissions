class Solution {
public:
    bool canAllocate(vector<int>& candies, long long k, int mid) {
        if (mid == 0) return false;  // Avoid division by zero

        long long count = 0;
        for (int c : candies) {
            count += c / mid;  // Count how many children can get `mid` candies
            if (count >= k) return true;
        }
        return false;
    }

    int maximumCandies(vector<int>& candies, long long k) {
        long long total = accumulate(candies.begin(), candies.end(), 0LL);
        if (total < k) return 0; // Not enough candies for k children

        int left = 1, right = *max_element(candies.begin(), candies.end()), ans = 0;

        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (canAllocate(candies, k, mid)) {
                ans = mid;   // Try to maximize `mid`
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return ans;
    }
};
