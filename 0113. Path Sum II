/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    void calPathSum( TreeNode* root, int t, int &csum, vector<int>&res, vector<vector<int>>&ans ) {
        if(!root) return; 

        csum += root->val;
        res.push_back(root->val);

        if(!root->left && !root->right && csum == t ) ans.push_back(res);
        calPathSum(root->right, t, csum, res, ans);
        calPathSum(root->left, t , csum, res, ans);
        csum -= root->val;
        res.pop_back();
    }
public:
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        TreeNode *curr= root;
        vector<vector<int>> ans;
        vector<int>res;
        int csum = 0;
        calPathSum(curr, targetSum,  csum, res, ans);
        return ans;
    }
};
