/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* recoverFromPreorder(string t) {

        stack<TreeNode*> s;
        int i = 0;

        while (i < t.length()) {

            int d = 0;
            while (i < t.length() && t[i] == '-') {
                i++;
                d++;
            }

            int v = 0;

            while (i < t.length() && isdigit(t[i])) {
                v = v * 10 + (t[i] - '0');
                i++;
            }

            TreeNode* temp = new TreeNode(v);

            while (s.size() > d) {
                s.pop();
            }

            if (!s.empty()) {
                if (s.top()->left == nullptr)
                    s.top()->left = temp;
                else
                    s.top()->right = temp;
            }

            s.push(temp);
        }

        while (s.size() > 1)
            s.pop();

        return s.top();
    }
};
